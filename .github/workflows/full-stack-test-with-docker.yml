name: Full Stack Test (Docker)

on:
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - infrastructure
          - admin
          - clients
          - userauth
          - oauth
          - comprehensive
      cleanup_on_failure:
        description: 'Cleanup test data on failure'
        required: false
        default: true
        type: boolean

env:
  COMPOSE_PROJECT_NAME: authly-fullstack

jobs:
  docker-build:
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        load: true
        tags: authly:fullstack-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Save Docker image
      run: |
        docker save authly:fullstack-test | gzip > authly-fullstack-image.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-fullstack
        path: authly-fullstack-image.tar.gz
        retention-days: 1

  full-stack-integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    
    strategy:
      matrix:
        test-suite:
          - name: "Infrastructure & Admin"
            scope: "admin"
            timeout: 5
          - name: "Client Management"
            scope: "clients" 
            timeout: 10
          - name: "User Authentication"
            scope: "userauth"
            timeout: 5
          - name: "OAuth Flow"
            scope: "oauth"
            timeout: 5
          - name: "Comprehensive"
            scope: "comprehensive"
            timeout: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image-fullstack
    
    - name: Load Docker image
      run: |
        docker load < authly-fullstack-image.tar.gz
        docker tag authly:fullstack-test authly:latest
    
    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq openssl
    
    - name: Create environment file
      run: |
        cat << EOF > .env
        # Database Configuration
        POSTGRES_PASSWORD=fullstack_test_password
        
        # Redis Configuration
        REDIS_PASSWORD=fullstack_redis_password
        
        # JWT Configuration
        JWT_SECRET_KEY=fullstack-test-secret-key-256-bit-long-for-jwt-tokens
        JWT_REFRESH_SECRET_KEY=fullstack-test-refresh-secret-key-256-bit-long
        
        # Development Mode
        AUTHLY_BOOTSTRAP_DEV_MODE=true
        AUTHLY_DEV_MODE=true
        AUTHLY_LOG_LEVEL=INFO
        
        # Admin Configuration
        AUTHLY_ADMIN_API_ENABLED=true
        AUTHLY_ADMIN_API_LOCALHOST_ONLY=false
        AUTHLY_ADMIN_PASSWORD=ci_admin_test_password
        EOF
    
    - name: Start Docker infrastructure
      run: |
        # Make wrapper script executable
        chmod +x scripts/run-integration-tests.sh
        
        # Use wrapper script to start services (handles all timing and health checks)
        ./scripts/run-integration-tests.sh start
    
    - name: Verify infrastructure readiness
      run: |
        # Test basic endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/.well-known/oauth-authorization-server || exit 1
        curl -f http://localhost:8000/.well-known/openid_configuration || exit 1
        curl -f http://localhost:8000/.well-known/jwks.json || exit 1
        
        # Test admin API availability
        curl -f http://localhost:8000/admin/health || exit 1
        
        echo "‚úÖ Infrastructure verification passed"
    
    - name: Run full stack integration tests
      timeout-minutes: ${{ matrix.test-suite.timeout }}
      env:
        AUTHLY_ADMIN_PASSWORD: ci_admin_test_password
        TEST_SCOPE: ${{ github.event.inputs.test_scope || matrix.test-suite.scope }}
        CLEANUP_ON_FAILURE: ${{ github.event.inputs.cleanup_on_failure || 'true' }}
      run: |
        # Use matrix scope if no manual override
        ACTUAL_SCOPE=${TEST_SCOPE:-${{ matrix.test-suite.scope }}}
        
        echo "üöÄ Running full stack integration tests..."
        echo "Test Suite: ${{ matrix.test-suite.name }}"
        echo "Test Scope: $ACTUAL_SCOPE"
        
        # Use the enhanced wrapper script (auto-detects password, handles all setup)
        ./scripts/run-integration-tests.sh "$ACTUAL_SCOPE"
    
    - name: Collect test logs on failure
      if: failure()
      run: |
        echo "=== Collecting logs after test failure ==="
        
        echo "=== Docker Compose Services ==="
        docker compose ps
        
        echo "=== Authly Application Logs ==="
        docker compose logs authly --tail 100
        
        echo "=== PostgreSQL Logs ==="
        docker compose logs postgres --tail 50
        
        echo "=== Redis Logs ==="
        docker compose logs redis --tail 50
        
        echo "=== Admin Token Status ==="
        if [[ -f /tmp/authly_admin_token.json ]]; then
          echo "Admin token file exists"
          jq . /tmp/authly_admin_token.json 2>/dev/null || echo "Invalid JSON in token file"
        else
          echo "No admin token file found"
        fi
        
        echo "=== Environment Variables ==="
        docker compose exec authly env | grep -E "(AUTHLY|ADMIN)" || echo "Could not fetch authly environment"
        
        echo "=== Test Data Status ==="
        ./scripts/integration-tests/cleanup.sh status || echo "Could not get cleanup status"
    
    - name: Force cleanup test data
      if: always()
      run: |
        echo "üßπ Performing final cleanup..."
        
        # Force cleanup regardless of test outcome
        AUTHLY_ADMIN_PASSWORD=ci_admin_test_password \
          ./scripts/integration-tests/cleanup.sh force || echo "Force cleanup completed with warnings"
        
        echo "‚úÖ Final cleanup completed"
    
    - name: Shutdown services
      if: always()
      run: |
        # Use wrapper script to cleanly stop services
        ./scripts/run-integration-tests.sh stop || true
        
        # Additional cleanup for CI environment
        docker system prune -f

  full-stack-summary:
    runs-on: ubuntu-latest
    needs: full-stack-integration-test
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "=== Full Stack Integration Test Summary ==="
        
        # This job will show as successful only if all matrix jobs passed
        if [[ "${{ needs.full-stack-integration-test.result }}" == "success" ]]; then
          echo "‚úÖ All full stack integration tests passed successfully!"
          echo "üéâ The OAuth 2.1 + OIDC infrastructure is working correctly"
          exit 0
        else
          echo "‚ùå Some full stack integration tests failed"
          echo "Check the individual test job logs for details"
          exit 1
        fi

