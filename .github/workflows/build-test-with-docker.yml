name: Build and Test (Docker)

on:
  workflow_dispatch:

env:
  COMPOSE_PROJECT_NAME: authly-ci

jobs:
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        load: true
        tags: authly:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Save Docker image
      run: |
        docker save authly:ci-test | gzip > authly-image.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: authly-image.tar.gz
        retention-days: 1

  docker-compose-test:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Load Docker image
      run: |
        docker load < authly-image.tar.gz
        docker tag authly:ci-test authly:latest
    
    - name: Create environment file
      run: |
        cat << EOF > .env
        POSTGRES_PASSWORD=ci_test_password
        REDIS_PASSWORD=ci_redis_password
        JWT_SECRET_KEY=ci-test-secret-key-256-bit-long-for-jwt-tokens
        JWT_REFRESH_SECRET_KEY=ci-test-refresh-secret-key-256-bit-long
        AUTHLY_BOOTSTRAP_DEV_MODE=true
        AUTHLY_DEV_MODE=true
        AUTHLY_LOG_LEVEL=DEBUG
        AUTHLY_ADMIN_ALLOW_LOCALHOST=true
        AUTHLY_ADMIN_PASSWORD=ci_admin_test_password
        EOF
    
    - name: Start Docker Compose services
      run: |
        docker compose up -d postgres redis
        # Wait for services to be healthy
        timeout 120s bash -c 'until docker compose ps postgres | grep "healthy"; do sleep 2; done'
        timeout 120s bash -c 'until docker compose ps redis | grep "healthy"; do sleep 2; done'
    
    - name: Start Authly application
      run: |
        docker compose up -d authly
        # Wait for application to be healthy (longer timeout to account for health check timing)
        timeout 180s bash -c 'until docker compose ps authly | grep "healthy"; do sleep 5; done'
    
    - name: Wait for services to be ready
      run: |
        # Additional wait to ensure services are fully ready
        sleep 30
    
    - name: Test service endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test OAuth discovery endpoint
        curl -f http://localhost:8000/.well-known/oauth-authorization-server || exit 1
        
        # Test OIDC discovery endpoint
        curl -f http://localhost:8000/.well-known/openid_configuration || exit 1
        
        # Test JWKS endpoint
        curl -f http://localhost:8000/.well-known/jwks.json || exit 1
    
    - name: Test database connectivity
      run: |
        docker compose exec -T postgres psql -U authly -d authly -c "SELECT version();" || exit 1
    
    - name: Test Redis connectivity
      run: |
        docker compose exec -T redis redis-cli -a ci_redis_password ping || exit 1
    
    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== PostgreSQL logs ==="
        docker compose logs postgres
        echo "=== Redis logs ==="
        docker compose logs redis
        echo "=== Authly logs ==="
        docker compose logs authly
        echo "=== Docker compose ps ==="
        docker compose ps
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v --remove-orphans

  docker-integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Load Docker image
      run: |
        docker load < authly-image.tar.gz
        docker tag authly:ci-test authly:latest
    
    - name: Install curl and test tools
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq
    
    - name: Create environment file
      run: |
        cat << EOF > .env
        POSTGRES_PASSWORD=integration_test_password
        REDIS_PASSWORD=integration_redis_password
        JWT_SECRET_KEY=integration-test-secret-key-256-bit-long-for-jwt
        JWT_REFRESH_SECRET_KEY=integration-test-refresh-secret-key-256-bit-long
        AUTHLY_BOOTSTRAP_DEV_MODE=true
        AUTHLY_DEV_MODE=true
        AUTHLY_LOG_LEVEL=INFO
        AUTHLY_ADMIN_ALLOW_LOCALHOST=true
        AUTHLY_ADMIN_PASSWORD=integration_admin_test_password
        EOF
    
    - name: Start full stack
      run: |
        docker compose up -d
        # Wait for all services to be healthy
        timeout 180s bash -c 'until docker compose ps | grep -E "(postgres|redis|authly)" | grep -v "healthy" | wc -l | grep "^0$"; do sleep 5; done'
    
    - name: Run OAuth endpoint availability test
      run: |
        # Test OAuth endpoints are mounted correctly
        echo "Testing OAuth router availability..."
        
        # Test authorization endpoint returns 401 for unauthenticated request (not 404)
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          "http://localhost:8000/api/v1/oauth/authorize")
        
        if [ "$RESPONSE" != "401" ]; then
          echo "OAuth authorization endpoint failed with status: $RESPONSE (expected 401 for unauthenticated request)"
          exit 1
        fi
        
        echo "OAuth router availability test passed - endpoint requires authentication as expected"
    
    - name: Run API integration tests
      run: |
        # Test multiple endpoints to ensure the application is working
        endpoints=(
          "/health"
          "/.well-known/oauth-authorization-server"
          "/.well-known/openid_configuration"
          "/.well-known/jwks.json"
          "/api/v1/oauth/authorize"
        )
        
        for endpoint in "${endpoints[@]}"; do
          echo "Testing endpoint: $endpoint"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000$endpoint")
          # OAuth authorize endpoint should return 401 for unauthenticated request, others should return 200
          if [[ "$endpoint" == "/api/v1/oauth/authorize" ]]; then
            if [ "$STATUS" != "401" ]; then
              echo "Endpoint $endpoint failed with status: $STATUS (expected 401)"
              exit 1
            fi
          else
            if [ "$STATUS" != "200" ] && [ "$STATUS" != "302" ]; then
              echo "Endpoint $endpoint failed with status: $STATUS"
              exit 1
            fi
          fi
          echo "âœ“ $endpoint - Status: $STATUS"
        done
    
    - name: Test admin API (if available)
      run: |
        # Test admin endpoints that should be available in dev mode
        curl -f http://localhost:8000/admin/health || echo "Admin endpoints not exposed (expected in some configurations)"
    
    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== All service logs ==="
        docker compose logs
        echo "=== Service status ==="
        docker compose ps
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v --remove-orphans