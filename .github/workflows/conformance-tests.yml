name: OIDC Spec Validation

# This workflow validates OIDC/OAuth specification compliance
# using a lightweight Python validator script

on:
  push:
    branches: [master]
    paths:
      - 'src/**'
      - 'tck/**'
      - '.github/workflows/conformance-tests.yml'
  pull_request:
    branches: [master]
    paths:
      - 'src/**'
      - 'tck/**'
  workflow_dispatch:

jobs:
  conformance-validation:
    name: OIDC Spec Conformance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      # This job validates OIDC compliance using a Python script that checks:
      # - Discovery endpoint format and required fields
      # - JWKS endpoint and key validation
      # - Token endpoint error responses
      # - Security requirements (PKCE, algorithms, etc.)
      
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Get Conformance Suite Latest Tag
        id: conformance-tag
        run: |
          # Get the latest tag from the conformance suite repository
          LATEST_TAG=$(curl -s https://api.github.com/repos/openid-certification/conformance-suite/tags | jq -r '.[0].name // "master"')
          echo "tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Using conformance suite tag: ${LATEST_TAG}"
      
      - name: Check if Image Exists
        id: check-image
        run: |
          # Check if the image already exists in GitHub Container Registry
          TAG="${{ steps.conformance-tag.outputs.tag }}"
          IMAGE="ghcr.io/${{ github.repository_owner }}/oidc-conformance-suite:${TAG}"
          
          if docker manifest inspect ${IMAGE} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Image ${IMAGE} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Image ${IMAGE} does not exist, will build"
          fi
      
      - name: Checkout OIDC Conformance Suite
        if: steps.check-image.outputs.exists == 'false'
        uses: actions/checkout@v5
        with:
          repository: openid-certification/conformance-suite
          path: tck/conformance-suite
          ref: ${{ steps.conformance-tag.outputs.tag }}
      
      - name: Set up Java
        if: steps.check-image.outputs.exists == 'false'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Build Conformance Suite JAR
        if: steps.check-image.outputs.exists == 'false'
        run: |
          cd tck/conformance-suite
          # Build the conformance suite JAR file
          mvn clean package -DskipTests
      
      - name: Set up Docker Buildx
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and Push Conformance Suite Image
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/build-push-action@v6
        with:
          context: ./tck
          file: ./tck/conformance-suite-production/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/oidc-conformance-suite:${{ steps.conformance-tag.outputs.tag }}
            ghcr.io/${{ github.repository_owner }}/oidc-conformance-suite:latest
          build-args: |
            VERSION=${{ steps.conformance-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Checkout Conformance Suite Resources
        uses: actions/checkout@v5
        with:
          repository: openid-certification/conformance-suite
          path: tck/conformance-suite
          ref: ${{ steps.conformance-tag.outputs.tag }}
          sparse-checkout: |
            src/main/resources/
          
      - name: Build Authly from Sources
        run: |
          # Build Authly image from latest sources
          echo "🔨 Building Authly Docker image from sources..."
          docker compose build authly
          
      - name: Start Authly and TCK Stack
        run: |
          # Start the main Authly stack (using freshly built image)
          docker compose up -d
          
          # Create network if it doesn't exist
          docker network create authly_default || true
          
          # Set the conformance image to use
          export CONFORMANCE_IMAGE="ghcr.io/${{ github.repository_owner }}/oidc-conformance-suite:${{ steps.conformance-tag.outputs.tag }}"
          
          # Start the TCK conformance suite stack using CI compose file
          cd tck
          docker compose -f docker-compose-tck-ci.yml up -d
          cd ..
          
          # Show what containers are starting
          echo "🐳 Starting containers:"
          docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Give services a moment to start
          sleep 5
          
          # Wait for Authly to be healthy (max 60 seconds)
          echo "⏳ Waiting for Authly to be healthy..."
          timeout 60 bash -c 'until curl -sf http://localhost:8000/health > /dev/null 2>&1; do echo -n "."; sleep 2; done'
          echo " ✅ Authly is healthy"
          
          # Wait for conformance suite to be ready (simpler check)
          echo "⏳ Waiting for conformance suite to be ready..."
          sleep 15  # Give conformance suite time to start
          
          # Show final container status
          echo "🐳 Running containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo "✅ All services should be ready"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install Dependencies
        run: |
          # Install Python packages needed for the validator script
          pip install requests urllib3 pyjwt
      
      - name: Run Conformance Validator
        id: validate
        run: |
          cd tck
          # Run the OIDC spec compliance validator
          # This checks discovery, JWKS, token formats, and security requirements
          python scripts/conformance-validator.py || true
          
          # Check if the report was created
          if [ -f reports/latest/SPECIFICATION_CONFORMANCE.md ]; then
            echo "✅ Conformance report generated successfully"
          else
            echo "❌ Failed to generate conformance report"
            exit 1
          fi
        continue-on-error: false
      
      - name: Check Compliance Level
        run: |
          cd tck
          
          # Display report location and contents for debugging
          echo "📁 Checking for reports in: $(pwd)/reports/latest/"
          ls -la reports/latest/ || echo "Reports directory not found"
          
          # Extract compliance percentage from the report
          if [ -f reports/latest/SPECIFICATION_CONFORMANCE.md ]; then
            echo "✅ Found conformance report"
            COMPLIANCE=$(grep "checks passed" reports/latest/SPECIFICATION_CONFORMANCE.md | grep -oE "[0-9]+%" | head -1 | tr -d '%' || echo "0")
            
            # Display the first part of the report for debugging
            echo "📄 Report preview:"
            head -20 reports/latest/SPECIFICATION_CONFORMANCE.md
          else
            echo "❌ Conformance report not found at reports/latest/SPECIFICATION_CONFORMANCE.md"
            COMPLIANCE="0"
          fi
          
          # If COMPLIANCE is empty, set it to 0
          if [ -z "$COMPLIANCE" ]; then
            COMPLIANCE="0"
          fi
          
          echo "## 📊 OIDC Conformance Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Compliance Level: ${COMPLIANCE}%**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$COMPLIANCE" -ge 90 ]; then
            echo "✅ Target compliance (90%) achieved!" >> $GITHUB_STEP_SUMMARY
            echo "COMPLIANCE_MET=true" >> $GITHUB_ENV
          else
            echo "❌ Below target compliance (90%)" >> $GITHUB_STEP_SUMMARY
            echo "COMPLIANCE_MET=false" >> $GITHUB_ENV
          fi
          
          # Add detailed report section to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>📋 View Detailed Report</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`markdown" >> $GITHUB_STEP_SUMMARY
          if [ -f reports/latest/SPECIFICATION_CONFORMANCE.md ]; then
            cat reports/latest/SPECIFICATION_CONFORMANCE.md | head -100 >> $GITHUB_STEP_SUMMARY
          else
            echo "Report not found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Conformance Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conformance-report
          path: |
            tck/reports/latest/SPECIFICATION_CONFORMANCE.md
            tck/reports/latest/conformance_results.json
      
      - name: Stop Services
        if: always()
        run: |
          # Stop TCK conformance suite stack
          cd tck
          docker compose -f docker-compose-tck-ci.yml down || true
          cd ..
          
          # Stop Authly stack
          docker compose down
      
      - name: Display Final Status
        if: always()
        run: |
          echo "=" | tee -a $GITHUB_STEP_SUMMARY
          echo "" | tee -a $GITHUB_STEP_SUMMARY
          echo "### 📊 Final Status" | tee -a $GITHUB_STEP_SUMMARY
          echo "" | tee -a $GITHUB_STEP_SUMMARY
          
          if [ "${{ env.COMPLIANCE_MET }}" == "true" ]; then
            echo "✅ **PASSED**: Conformance validation met 90% target" | tee -a $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FAILED**: Conformance validation below 90% target" | tee -a $GITHUB_STEP_SUMMARY
          fi
          
          echo "" | tee -a $GITHUB_STEP_SUMMARY
          echo "📥 **Artifacts**: Download the full conformance report from the workflow artifacts" | tee -a $GITHUB_STEP_SUMMARY
          
      - name: Exit Status
        run: |
          if [ "${{ env.COMPLIANCE_MET }}" != "true" ]; then
            echo "❌ Conformance validation failed to meet 90% target"
            exit 1
          fi
          echo "✅ Conformance validation passed (90%+ compliance)"