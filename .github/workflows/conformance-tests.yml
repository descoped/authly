name: OIDC Conformance Tests

on:
  push:
    branches: [master, main]
    paths:
      - 'src/**'
      - 'tck/**'
      - 'docker-compose*.yml'
      - '.github/workflows/conformance-tests.yml'
  pull_request:
    branches: [master, main]
    paths:
      - 'src/**'
      - 'tck/**'
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  conformance-tests:
    name: Run OIDC Conformance Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('tck/conformance-suite/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Build conformance suite JAR
        run: |
          if [ ! -f "tck/conformance-suite/target/fapi-test-suite.jar" ]; then
            echo "Building conformance suite JAR..."
            
            # Clone if not exists
            if [ ! -d "tck/conformance-suite/.git" ]; then
              git clone https://gitlab.com/openid/conformance-suite.git tck/conformance-suite
            fi
            
            # Build JAR
            cd tck/conformance-suite
            docker run --rm \
              -v "$PWD":/usr/src/mymaven \
              -v "$HOME/.m2":/root/.m2 \
              -w /usr/src/mymaven \
              maven:3-eclipse-temurin-17 \
              mvn -B clean package -DskipTests=true
            cd ../..
          fi
      
      - name: Start services
        run: |
          # Start all services including conformance suite
          docker compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.tck.yml up -d
          
          # Wait for services to be healthy
          timeout 120 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 2; done'
      
      - name: Check service health
        run: |
          docker compose ps
          docker compose logs --tail=50
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          pip install requests urllib3
      
      - name: Run conformance tests
        id: conformance
        run: |
          cd tck
          python scripts/run-conformance-tests.py
        continue-on-error: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: conformance-reports
          path: tck/results/
      
      - name: Generate test summary
        if: always()
        run: |
          if [ -f "tck/results/conformance_report_*.md" ]; then
            echo "## OIDC Conformance Test Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            tail -n +3 tck/results/conformance_report_*.md >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find the latest report
            const reportsDir = 'tck/results';
            const files = fs.readdirSync(reportsDir);
            const reportFile = files.find(f => f.startsWith('conformance_report_'));
            
            if (reportFile) {
              const report = fs.readFileSync(path.join(reportsDir, reportFile), 'utf8');
              
              // Extract summary from report
              const lines = report.split('\n');
              const summaryStart = lines.findIndex(l => l.includes('## Executive Summary'));
              const summaryEnd = lines.findIndex((l, i) => i > summaryStart && l.startsWith('##'));
              const summary = lines.slice(summaryStart, summaryEnd).join('\n');
              
              // Create PR comment
              const comment = `## üß™ OIDC Conformance Test Results
              
              ${summary}
              
              <details>
              <summary>View Full Report</summary>
              
              ${report}
              
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
      
      - name: Stop services
        if: always()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.tck.yml down
      
      - name: Check test results
        run: |
          if [ "${{ steps.conformance.outcome }}" != "success" ]; then
            echo "‚ùå Conformance tests failed"
            exit 1
          fi
          echo "‚úÖ Conformance tests passed"