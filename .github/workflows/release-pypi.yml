name: Release to PyPI

on:
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate tag format
      run: |
        if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid tag format: ${{ github.ref_name }}"
          echo "Expected format: v[0-9]+.[0-9]+.[0-9]+ (e.g., v1.2.3)"
          exit 1
        fi
        echo "✅ Tag format is valid: ${{ github.ref_name }}"

    - name: Extract version
      id: extract-version
      run: |
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Extracted version: $VERSION"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6

    - name: Verify version consistency
      run: |
        PYPROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        TAG_VERSION="${{ steps.extract-version.outputs.version }}"
        
        if [[ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]]; then
          echo "❌ Version mismatch!"
          echo "   pyproject.toml version: $PYPROJECT_VERSION"
          echo "   Git tag version: $TAG_VERSION"
          echo ""
          echo "Please update pyproject.toml version to match the git tag"
          exit 1
        fi
        
        echo "✅ Version consistency verified: $TAG_VERSION"

  lint-and-test:
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6

    - name: Install dependencies
      run: |
        uv sync --all-groups

    - name: Run linting
      run: |
        echo "🔍 Running code linting..."
        uv run ruff check .
        uv run ruff format --check .
        echo "✅ Linting passed"

    - name: Run tests with coverage
      env:
        # Resource Manager Configuration
        AUTHLY_MODE: testing
        AUTHLY_BOOTSTRAP_ENABLED: true
        
        # Database (uses testcontainers)
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        
        # JWT Configuration
        JWT_SECRET_KEY: test-secret-key-for-ci-only-256-bit-long
        JWT_REFRESH_SECRET_KEY: test-refresh-secret-key-for-ci-only-256-bit-long
        
        # Admin Configuration
        AUTHLY_ADMIN_USERNAME: admin
        AUTHLY_ADMIN_PASSWORD: admin123
        AUTHLY_ADMIN_EMAIL: admin@localhost
        AUTHLY_ADMIN_ALLOW_LOCALHOST: true
        AUTHLY_ADMIN_API_ENABLED: true
        
        # Testing port range
        FASTAPI_TESTING_PORT_RANGE_START: 8001
        FASTAPI_TESTING_PORT_RANGE_END: 9000
      run: |
        echo "🧪 Running test suite with coverage..."
        uv run pytest -v --tb=short --cov=src/authly --cov-report=xml --cov-report=term
        echo "✅ All tests passed"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: descoped/authly

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [validate-release, lint-and-test]
    environment: pypi
    permissions:
      id-token: write  # For trusted publishing
      contents: read
      attestations: write  # For artifact attestation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6

    - name: Build package
      run: |
        echo "🔨 Building package for version ${{ needs.validate-release.outputs.version }}"
        uv build
        echo "📋 Built artifacts:"
        ls -la dist/
        echo "✅ Package build completed"

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: 'dist/*'

    - name: Upload wheel as artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/*.whl
        retention-days: 1

    - name: Publish to PyPI
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI..."
        uv publish --token $PYPI_API_TOKEN
        echo "✅ Successfully published authly v${{ needs.validate-release.outputs.version }} to PyPI"

    - name: Create deployment summary
      run: |
        echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: authly" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Git Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI URL**: https://pypi.org/project/authly/${{ needs.validate-release.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Install as library" >> $GITHUB_STEP_SUMMARY
        echo "uv add authly==${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Install as CLI tool" >> $GITHUB_STEP_SUMMARY
        echo "uvx install authly==${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "authly --help" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### CLI Usage" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Start OAuth server" >> $GITHUB_STEP_SUMMARY
        echo "authly serve --host 0.0.0.0 --port 8000" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Development mode with embedded PostgreSQL" >> $GITHUB_STEP_SUMMARY
        echo "authly serve --embedded --seed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Admin operations" >> $GITHUB_STEP_SUMMARY
        echo "authly admin login -u admin" >> $GITHUB_STEP_SUMMARY
        echo "authly admin client create --name MyApp --client-type public --redirect-uri http://localhost:3000/callback" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: [validate-release, lint-and-test, build-and-publish]
    permissions:
      contents: read
      packages: write  # For Docker registry push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download wheel artifact
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          descoped/authly
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          USE_WHEEL=true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update deployment summary with Docker info
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docker Images" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Pull and run Docker image" >> $GITHUB_STEP_SUMMARY
        echo "docker pull descoped/authly:${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8000:8000 descoped/authly:${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Use latest tag" >> $GITHUB_STEP_SUMMARY
        echo "docker pull descoped/authly:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8000:8000 descoped/authly:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Hub**: https://hub.docker.com/r/descoped/authly" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY