"""
Browser-based login tests.

NOTE: Browser authentication endpoints (/auth/login, /auth/logout, /auth/session) 
are NOT implemented in the codebase. These tests document expected behavior
and are skipped until implementation.

The actual authentication is handled via OAuth endpoints:
- /api/v1/oauth/token (password grant for direct login)
- /api/v1/oauth/authorize (authorization code flow)
"""

import pytest
from fastapi import status


@pytest.mark.skip(reason="Browser authentication endpoints not implemented")
class TestBrowserLoginEndpoints:
    """Test browser-based login endpoints that don't exist yet."""

    @pytest.mark.asyncio
    async def test_login_page_rendering(self, test_server):
        """Test that login page would be rendered."""
        async with test_server.client as client:
            response = await client.get("/auth/login")
            # Would expect HTML login form
            assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_login_form_submission(self, test_server):
        """Test login form submission."""
        async with test_server.client as client:
            response = await client.post(
                "/auth/login",
                data={
                    "username": "test",
                    "password": "test",
                },
            )
            # Would expect redirect or session creation
            assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_logout_endpoint(self, test_server):
        """Test logout endpoint."""
        async with test_server.client as client:
            response = await client.post("/auth/logout")
            # Would expect session termination
            assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_session_endpoint(self, test_server):
        """Test session information endpoint."""
        async with test_server.client as client:
            response = await client.get("/auth/session")
            # Would expect session details or 401
            assert response.status_code == status.HTTP_404_NOT_FOUND


class TestOAuthPasswordGrant:
    """Test actual OAuth password grant that exists."""

    @pytest.mark.asyncio
    async def test_password_grant_login(
        self, test_server, initialize_authly, transaction_manager
    ):
        """Test login via OAuth password grant (actual implementation)."""
        from authly.users import UserRepository
        from authly.users.service import UserService
        from uuid import uuid4
        from psycopg_toolkit import TransactionManager
        
        async with test_server.client as http_client:
            async with transaction_manager.transaction() as conn:
                user_repo = UserRepository(conn)
                user_service = UserService(user_repo)
                
                # Create test user with correct signature
                username = f"testuser_{uuid4().hex[:8]}"
                email = f"{username}@example.com"
                password = "TestPassword123!"
                
                await user_service.create_user(
                    username=username,
                    email=email,
                    password=password,
                    is_admin=False,
                    is_active=True,
                    is_verified=True,
                )
                
                # Login via OAuth token endpoint (actual implementation)
                response = await http_client.post(
                    "/api/v1/oauth/token",
                    data={
                        "grant_type": "password",
                        "username": username,
                        "password": password,
                    },
                    headers={"Content-Type": "application/x-www-form-urlencoded"},
                )
                
                assert response.status_code == status.HTTP_200_OK
                token_data = response.json()
                assert "access_token" in token_data
                assert "refresh_token" in token_data
                assert token_data["token_type"] == "Bearer"

    @pytest.mark.asyncio  
    async def test_password_grant_invalid_credentials(
        self, test_server, initialize_authly, transaction_manager
    ):
        """Test login with invalid credentials."""
        from authly.users import UserRepository
        from authly.users.service import UserService
        from uuid import uuid4
        from psycopg_toolkit import TransactionManager
        
        async with test_server.client as http_client:
            async with transaction_manager.transaction() as conn:
                user_repo = UserRepository(conn)
                user_service = UserService(user_repo)
                
                # Create test user
                username = f"testuser_{uuid4().hex[:8]}"
                email = f"{username}@example.com"
                password = "TestPassword123!"
                
                await user_service.create_user(
                    username=username,
                    email=email,
                    password=password,
                    is_admin=False,
                    is_active=True,
                    is_verified=True,
                )
                
                # Try login with wrong password
                response = await http_client.post(
                    "/api/v1/oauth/token",
                    data={
                        "grant_type": "password",
                        "username": username,
                        "password": "WrongPassword",
                    },
                    headers={"Content-Type": "application/x-www-form-urlencoded"},
                )
                
                assert response.status_code == status.HTTP_400_BAD_REQUEST
                error_data = response.json()
                assert "error" in error_data
                assert error_data["error"] == "invalid_grant"

    @pytest.mark.asyncio
    async def test_password_grant_inactive_user(
        self, test_server, initialize_authly, transaction_manager
    ):
        """Test login with inactive user."""
        from authly.users import UserRepository
        from authly.users.service import UserService
        from uuid import uuid4
        from psycopg_toolkit import TransactionManager
        
        async with test_server.client as http_client:
            async with transaction_manager.transaction() as conn:
                user_repo = UserRepository(conn)
                user_service = UserService(user_repo)
                
                # Create inactive user
                username = f"testuser_{uuid4().hex[:8]}"
                email = f"{username}@example.com"
                password = "TestPassword123!"
                
                user = await user_service.create_user(
                    username=username,
                    email=email,
                    password=password,
                    is_admin=False,
                    is_active=False,  # Inactive
                    is_verified=True,
                )
                
                # Try to login
                response = await http_client.post(
                    "/api/v1/oauth/token",
                    data={
                        "grant_type": "password",
                        "username": username,
                        "password": password,
                    },
                    headers={"Content-Type": "application/x-www-form-urlencoded"},
                )
                
                assert response.status_code == status.HTTP_400_BAD_REQUEST
                error_data = response.json()
                assert "error" in error_data
                assert error_data["error"] == "invalid_grant"

    @pytest.mark.asyncio
    async def test_password_grant_unverified_user(
        self, test_server, initialize_authly, transaction_manager
    ):
        """Test login with unverified user."""
        from authly.users import UserRepository
        from authly.users.service import UserService
        from uuid import uuid4
        from psycopg_toolkit import TransactionManager
        
        async with test_server.client as http_client:
            async with transaction_manager.transaction() as conn:
                user_repo = UserRepository(conn)
                user_service = UserService(user_repo)
                
                # Create unverified user
                username = f"testuser_{uuid4().hex[:8]}"
                email = f"{username}@example.com"
                password = "TestPassword123!"
                
                user = await user_service.create_user(
                    username=username,
                    email=email,
                    password=password,
                    is_admin=False,
                    is_active=True,
                    is_verified=False,  # Unverified
                )
                
                # Try to login
                response = await http_client.post(
                    "/api/v1/oauth/token",
                    data={
                        "grant_type": "password",
                        "username": username,
                        "password": password,
                    },
                    headers={"Content-Type": "application/x-www-form-urlencoded"},
                )
                
                assert response.status_code == status.HTTP_400_BAD_REQUEST
                error_data = response.json()
                assert "error" in error_data
                assert error_data["error"] == "invalid_grant"


class TestOAuthIntegration:
    """Test OAuth flow integration that actually exists."""

    @pytest.mark.asyncio
    async def test_oauth_authorization_endpoint(
        self, test_server, initialize_authly, transaction_manager
    ):
        """Test OAuth authorization endpoint (actual implementation)."""
        from authly.oauth.client_repository import ClientRepository
        from authly.oauth.models import ClientType, TokenEndpointAuthMethod
        from uuid import uuid4
        from psycopg_toolkit import TransactionManager
        
        async with test_server.client as http_client:
            async with transaction_manager.transaction() as conn:
                client_repo = ClientRepository(conn)
                
                # Create OAuth client
                client_data = {
                    "client_id": f"test_client_{uuid4().hex[:8]}",
                    "client_name": "Test Client",
                    "client_type": ClientType.PUBLIC,
                    "redirect_uris": ["http://localhost:8000/callback"],
                    "require_pkce": True,
                    "token_endpoint_auth_method": TokenEndpointAuthMethod.NONE,
                }
                created_client = await client_repo.create_client(client_data)
                
                # Generate PKCE
                import base64
                import hashlib
                import secrets
                
                code_verifier = base64.urlsafe_b64encode(secrets.token_bytes(32)).decode("utf-8").rstrip("=")
                digest = hashlib.sha256(code_verifier.encode("utf-8")).digest()
                code_challenge = base64.urlsafe_b64encode(digest).decode("utf-8").rstrip("=")
                
                # Test authorization endpoint
                response = await http_client.get(
                    "/api/v1/oauth/authorize",
                    params={
                        "response_type": "code",
                        "client_id": created_client.client_id,
                        "redirect_uri": "http://localhost:8000/callback",
                        "code_challenge": code_challenge,
                        "code_challenge_method": "S256",
                        "state": "test_state",
                    },
                )
                
                # Should redirect to login or show consent
                assert response.status_code in [
                    status.HTTP_302_FOUND,  # Redirect to login
                    status.HTTP_401_UNAUTHORIZED,  # Not authenticated
                    status.HTTP_200_OK,  # Consent page
                ]