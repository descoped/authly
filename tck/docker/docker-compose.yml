version: '3.8'

services:
  # PostgreSQL for conformance suite data storage
  conformance-db:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: conformance
      POSTGRES_USER: conformance
      POSTGRES_PASSWORD: conformance_pass
    volumes:
      - conformance_db_data:/var/lib/postgresql/data
    networks:
      - conformance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U conformance"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for conformance suite results storage
  conformance-mongo:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: conformance
    volumes:
      - conformance_mongo_data:/data/db
    networks:
      - conformance-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenID Connect Conformance Suite
  conformance-suite:
    image: openid/conformance-suite:latest
    ports:
      - "8443:8443"  # Web UI
      - "9443:9443"  # API
    environment:
      - MONGODB_HOST=conformance-mongo
      - MONGODB_PORT=27017
      - MONGODB_DATABASE=conformance
      - JAVA_OPTS=-Xmx2g -XX:MaxMetaspaceSize=512m
      - CONFORMANCE_SERVER=https://localhost:8443
      - CONFORMANCE_ISSUER=http://host.docker.internal:8000
    volumes:
      - ./config:/config:ro
      - conformance_logs:/logs
      - conformance_export:/export
    networks:
      - conformance-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      conformance-mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8443/api/runner/available"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx reverse proxy for handling HTTPS
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - conformance-network
    depends_on:
      - conformance-suite

  # Authly server (optional - can run externally)
  authly-server:
    build:
      context: ../..
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://authly:authly@authly-db:5432/authly
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-test-secret-key-for-conformance}
      - JWT_REFRESH_SECRET_KEY=${JWT_REFRESH_SECRET_KEY:-test-refresh-secret-key}
      - CORS_ORIGINS=["https://localhost:8443","http://localhost:8443","https://localhost:443"]
      - OIDC_ENABLED=true
      - JWT_ALGORITHM=RS256
      - AUTHLY_ADMIN_PASSWORD=${AUTHLY_ADMIN_PASSWORD:-admin_password}
    networks:
      - conformance-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      authly-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - with-authly

  # PostgreSQL for Authly (when running in Docker)
  authly-db:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: authly
      POSTGRES_USER: authly
      POSTGRES_PASSWORD: authly
    volumes:
      - authly_db_data:/var/lib/postgresql/data
      - ../../docker-postgres/init-db-and-user.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - conformance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authly"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - with-authly

volumes:
  conformance_db_data:
  conformance_mongo_data:
  conformance_logs:
  conformance_export:
  authly_db_data:

networks:
  conformance-network:
    driver: bridge