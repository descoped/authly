# OIDC Conformance Testing Makefile
# Properly handles external dependencies without modifying them

.PHONY: help init clone build start stop test clean status

# Configuration
CONFORMANCE_REPO := https://gitlab.com/openid/conformance-suite.git
CONFORMANCE_DIR := conformance-suite
CONFORMANCE_VERSION := master  # Pin to specific version in production
BUILD_DIR := conformance-suite-build

help:
	@echo "OIDC Conformance Testing Commands"
	@echo "================================="
	@echo ""
	@echo "Setup:"
	@echo "  make init     - Initialize conformance suite (clone + build)"
	@echo "  make clone    - Clone conformance suite repository"
	@echo "  make build    - Build conformance suite from source"
	@echo "  make start    - Start all services"
	@echo "  make stop     - Stop all services"
	@echo ""
	@echo "Testing:"
	@echo "  make test     - Run automated conformance tests"
	@echo "  make quick    - Run quick validation tests"
	@echo ""
	@echo "Management:"
	@echo "  make status   - Check service status"
	@echo "  make logs     - View service logs"
	@echo "  make clean    - Clean up everything"
	@echo "  make reset    - Reset conformance suite to upstream"

# Initialize everything
init: build
	@echo "‚úÖ Conformance suite initialized"

# Clone conformance suite if not exists (optional for local reference)
clone:
	@if [ ! -d "$(CONFORMANCE_DIR)/.git" ]; then \
		echo "üì¶ Cloning conformance suite for reference..."; \
		git clone $(CONFORMANCE_REPO) $(CONFORMANCE_DIR); \
		cd $(CONFORMANCE_DIR) && git checkout $(CONFORMANCE_VERSION); \
	else \
		echo "‚úÖ Conformance suite already cloned"; \
	fi

# Build conformance suite using Docker (no local dependencies)
build:
	@echo "üî® Building conformance suite with Docker..."
	@cd $(BUILD_DIR) && docker compose build tck-server
	@echo "‚úÖ Conformance suite built"

# Start services using our build configuration
start: build
	@echo "üöÄ Starting services..."
	@cd $(BUILD_DIR) && docker compose up -d
	@echo "‚úÖ Services started"
	@echo "   Conformance Suite: https://localhost:9443"

# Stop services
stop:
	@echo "üõë Stopping services..."
	@cd $(BUILD_DIR) && docker compose down
	@echo "‚úÖ Services stopped"

# Run conformance tests
test:
	@echo "üß™ Running conformance tests..."
	@python3 scripts/run-conformance-tests.py

# Quick validation
quick:
	@echo "‚ö° Running quick tests..."
	@python3 scripts/quick-test.py

# Check status
status:
	@echo "üìä Service Status:"
	@docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "tck-" || echo "No TCK services running"

# View logs
logs:
	@cd $(BUILD_DIR) && docker compose logs -f

# Clean everything
clean: stop
	@echo "üßπ Cleaning up..."
	@rm -rf $(CONFORMANCE_DIR)/target
	@cd $(BUILD_DIR) && docker compose down -v
	@rm -rf results/*
	@echo "‚úÖ Cleaned"

# Reset conformance suite to upstream (removes local changes)
reset:
	@echo "üîÑ Resetting conformance suite to upstream..."
	@if [ -d "$(CONFORMANCE_DIR)/.git" ]; then \
		cd $(CONFORMANCE_DIR) && \
		git stash && \
		git checkout $(CONFORMANCE_VERSION) && \
		git reset --hard origin/$(CONFORMANCE_VERSION) && \
		git clean -fd; \
		echo "‚úÖ Reset complete"; \
	else \
		echo "‚ùå Conformance suite not cloned"; \
	fi

# Update to latest upstream
update:
	@echo "üì• Updating conformance suite..."
	@if [ -d "$(CONFORMANCE_DIR)/.git" ]; then \
		cd $(CONFORMANCE_DIR) && \
		git fetch origin && \
		git checkout $(CONFORMANCE_VERSION) && \
		git pull origin $(CONFORMANCE_VERSION); \
		echo "‚úÖ Updated to latest"; \
	else \
		make clone; \
	fi

# Check for local modifications
check-modifications:
	@echo "üîç Checking for local modifications..."
	@if [ -d "$(CONFORMANCE_DIR)/.git" ]; then \
		cd $(CONFORMANCE_DIR) && \
		if git diff --quiet && git diff --cached --quiet; then \
			echo "‚úÖ No local modifications"; \
		else \
			echo "‚ö†Ô∏è  Local modifications detected:"; \
			git status --short; \
		fi \
	fi

# Development: Open conformance suite in browser
browse:
	@echo "üåê Opening conformance suite..."
	@open https://localhost:8443 || xdg-open https://localhost:8443